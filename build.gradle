ext.minSdkVersion = 21
ext.compileSdkVersion = 26
ext.buildToolsVersion = '26.0.2'

buildscript {
    ext.kotlin_version = '1.1.51'

    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-beta7'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.1'
        classpath "gradle.plugin.com.gladed.gradle.androidgitversion:gradle-android-git-version:0.4.0"
        classpath 'org.pegdown:pegdown:1.4.1'
    }
}

apply from: rootProject.file("gradle/dependencies.gradle")

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.fabric.io/public' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext.props = new Properties()
if (file("tokens.properties").exists()) {
    file("tokens.properties").withInputStream {
        stream -> ext.props.load(stream)
    }
}

import org.pegdown.PegDownProcessor
import groovy.text.SimpleTemplateEngine

def readTags() {
    def tags = []
    def proc = "git tag -l".execute()
    proc.in.eachLine { line -> tags += line}
    tags.sort {}
    Collections.reverse( tags )
    tags
}

def readTagMessage(String tag) {
    def message = []
    def proc = "git cat-file tag $tag".execute()
    def startCollection = false
    proc.in.eachLine { line ->
        if (line.isEmpty()) {
            startCollection = true
        }
        if (startCollection) {
            message += line
        }
    }
    proc.err.eachLine { line -> println line }
    message
}

task releaseNotes() << {
    def releaseNotes = new File('release_notes.md')
    releaseNotes.delete()
    def versions = ""

    def tags = readTags()
    tags.each {tag ->
        versions += "- [$tag](#$tag)\n"
    }

    tags.each {tag ->
        releaseNotes << "# ${tag}<a name='$tag'></a>\n"
        def message = readTagMessage(tag)
        message.each{releaseNotes << "$it\n"}
        releaseNotes << "\n"
    }


    def writer = new StringWriter()
    def pdp = new PegDownProcessor()
    def engine = new SimpleTemplateEngine()
    def template = engine.createTemplate(new File("release_notes.tpl"))
    def daten = [releaseNotes:pdp.markdownToHtml(new File("release_notes.md").text), application: project.name, versions:pdp.markdownToHtml(versions)]

    def ergebnis = template.make(daten)
    new File('release_notes.html').withWriter { w ->
        w.write(ergebnis)
    }
}
